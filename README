Command Argument Parser

A no-nonsense command argument parser for C#.

-----

Goals: A simple command line argument parser that can be used for consistent
behavior for command line applications.  The library shall not throw exceptions
and rely on the caller to validate the options it changes (as well as checking
for errors if they happen to arise manually).

All you really need to do is make an instance of the parser and use the
included BoolRef class to make what is essentially a reference to a boolean.  I
chose to require explicit casts from bool to BoolRef since you could otherwise
stick a normal bool into the Add* methods and not know why it wasn't changing
your options.

You can add short options (like '-o'), long options (like '--option').  They
can be either a bool, or they can take the next argument in the argument array
as the value (e.g. '--value foo').

-----

Short options group with a value argument will probably not give you what you
want.  For example, -avb, where -v is a short option argument, will give you -a
-v -b, so "-b" will be the argument to -v.

Concept with value options would be that two such in the same group will just
add an error and then just grab the argument for the latter.  Otherwise the
next non-option argument will get the value.

-----

Example:

   static int Main(string[] args) {
       bool aOption = false;
       bool bOption = true;
       StringBuilder cValue = new StringBuilder();
       var parser = new ArgumentParser();
       // We need to be able to reference our booleans, so we need unsafe.
       unsafe {
           parser.AddOnOption('a', "a-option", &aOption);
           parser.AddOffOption('b', "b-option", &bOption);
           parser.AddValueOption('c', "c-option", cValue);
           parser.Parse(args);
       }

       if (parser.errors.count > 0) {
           console.writeline("error: " + parser.errors[0]);
           return 1;
       }

       if (aoption) {
           console.writeline("a enabled.");
       }

       if (boption) {
           console.writeline("b enabled.");
       }

       if (cvalue.tostring() != "") {
           console.writeline("c: " + cvalue.tostring());
       }

       console.write("arguments:");
       for (int i = 0; i < parser.arguments.count; ++i) {
           console.write(" " + parser.arguments[i]);
       }
       console.writeline();

       return 0;
   }

> .\test -a -b -c foo -c bar -- -c baz
A enabled.
C: bar
Arguments: -c baz

-----
